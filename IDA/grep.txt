push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
sub     rsp, 18h
mov     r14, rsi
mov     [rbp+var_38], rdi
mov     rbx, cs:qword_1000048D0
test    rbx, rbx
jz      short loc_100000DFE
mov     r12, cs:qword_1000048D8
mov     esi, 0Ah; int
mov     rdi, r12; void *
mov     rdx, rbx; size_t
call    _memchr
test    rax, rax
jz      short loc_100000E36
inc     rax
mov     rcx, rax
sub     rcx, r12
sub     rbx, rcx
mov     cs:qword_1000048D0, rbx
mov     cs:qword_1000048D8, rax
mov     [r14], rcx
jmp     loc_100000F4B
mov     [rbp+var_30], r14
mov     rdi, [rbp+var_38]
call    sub_100000F5D
test    eax, eax
jnz     loc_100000F2A
mov     rbx, cs:qword_1000048D0
test    rbx, rbx
mov     r14, [rbp+var_30]
jnz     short loc_100000DC0
mov     qword ptr [r14], 0
mov     r12, cs:qword_1000048D8
jmp     loc_100000F4B
mov     [rbp+var_30], r14
xor     r14d, r14d
mov     r15, rbx
lea     rbx, [r15+50h]
cmp     cs:qword_100004908, rbx
mov     rdi, cs:qword_1000048E0
jnb     short loc_100000E74
mov     rsi, rbx
call    sub_10000339F
mov     rdi, rax
mov     cs:qword_1000048E0, rdi
mov     cs:qword_100004908, rbx
mov     r12, cs:qword_1000048D8
add     rdi, r14; void *
mov     rdx, r15
sub     rdx, r14; size_t
mov     rsi, r12; void *
call    _memcpy
mov     rdi, [rbp+var_38]
call    sub_100000F5D
test    eax, eax
jnz     loc_100000F2A
mov     rbx, cs:qword_1000048D0
test    rbx, rbx
jz      loc_100000F3A
mov     r12, cs:qword_1000048D8
mov     esi, 0Ah; int
mov     rdi, r12; void *
mov     rdx, rbx; size_t
call    _memchr
mov     r13, rax
add     rbx, r15
test    r13, r13
mov     r14, r15
jz      loc_100000E3D
inc     r13
mov     rbx, r13
sub     rbx, r12
lea     r14, [rbx+r15]
cmp     cs:qword_100004908, r14
mov     rdi, cs:qword_1000048E0
jnb     short loc_100000F0C
mov     rsi, r14
call    sub_10000339F
mov     rdi, rax
mov     cs:qword_1000048E0, rdi
mov     cs:qword_100004908, r14
mov     r12, cs:qword_1000048D8
add     rdi, r15; void *
mov     rsi, r12; void *
mov     rdx, rbx; size_t
call    _memcpy
sub     cs:qword_1000048D0, rbx
mov     cs:qword_1000048D8, r13
jmp     short loc_100000F3D
mov     rax, [rbp+var_30]
mov     qword ptr [rax], 0
xor     r12d, r12d
jmp     short loc_100000F4B
mov     r14, r15
mov     rax, [rbp+var_30]
mov     [rax], r14
mov     r12, cs:qword_1000048E0
mov     rax, r12
add     rsp, 18h
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    rbx
sub     rsp, 8008h
mov     r14, rdi
mov     rax, cs:___stack_chk_guard_ptr
mov     rax, [rax]
mov     [rbp+var_20], rax
lea     rax, dword_1000049B4
mov     ecx, [rax]
xor     ebx, ebx
cmp     ecx, 1
jz      loc_100001136
mov     rax, cs:buf
mov     cs:qword_1000048D8, rax
mov     cs:qword_1000048D0, 0
cmp     ecx, 2
jnz     short loc_100000FCB
mov     rdi, cs:file; file
mov     edx, 8000h; len
mov     rsi, rax; buf
call    _gzread
cdqe
jmp     loc_100001123
cmp     ecx, 3
jnz     loc_10000105B
mov     rsi, cs:b; b
test    rsi, rsi
jz      short loc_10000105B
lea     r15, [rbp+bzerror]
mov     ecx, 8000h; len
mov     rdi, r15; bzerror
mov     rdx, rax; buf
call    _BZ2_bzRead
cdqe
mov     ecx, [r15]
cmp     ecx, 4
jz      loc_100001123
test    ecx, ecx
jz      loc_100001123
cmp     ecx, 0FFFFFFFBh
jnz     loc_10000111C
mov     rsi, cs:b; b
lea     rdi, [rbp+bzerror]; bzerror
call    _BZ2_bzReadClose
mov     cs:b, 0
mov     edi, [r14]; int
xor     esi, esi; off_t
xor     edx, edx; int
call    _lseek
cmp     rax, 0FFFFFFFFFFFFFFFFh
jz      loc_100001131
mov     edi, [r14]
mov     rsi, cs:buf
mov     edx, 8000h
jmp     short loc_10000108F
mov     edx, ecx
or      edx, 1
cmp     edx, 5
jnz     short loc_100001084
lea     rdi, qword_100004910
mov     rsi, 0FFFFFFFFFFFFFFFFh
cmp     ecx, 4
jnz     short loc_100001099
mov     edx, 8
call    _lzma_stream_decoder
jmp     short loc_10000109E
mov     edi, [r14]; int
mov     edx, 8000h; size_t
mov     rsi, rax; void *
call    _read
jmp     loc_100001123
call    _lzma_alone_decoder
mov     ebx, 0FFFFFFFFh
test    eax, eax
jnz     loc_100001136
mov     rax, cs:buf
mov     cs:qword_100004928, rax
mov     cs:qword_100004930, 8000h
lea     rsi, [rbp+bzerror]; void *
mov     cs:qword_100004910, rsi
mov     edi, [r14]; int
mov     edx, 8000h; size_t
call    _read
test    rax, rax
js      short loc_100001136
setz    cl
movzx   ecx, cl
lea     esi, [rcx+rcx*2]
mov     cs:qword_100004918, rax
lea     rdi, qword_100004910
call    _lzma_code
cmp     eax, 1
ja      short loc_100001136
mov     eax, 8000h
sub     rax, cs:qword_100004930
mov     cs:qword_1000048D0, rax
xor     ebx, ebx
jmp     short loc_100001136
mov     rax, 0FFFFFFFFFFFFFFFFh
test    rax, rax
js      short loc_100001131
mov     cs:qword_1000048D0, rax
jmp     short loc_100001136
mov     ebx, 0FFFFFFFFh
mov     rax, cs:___stack_chk_guard_ptr
mov     rax, [rax]
cmp     rax, [rbp+var_20]
jnz     short loc_100001156
mov     eax, ebx
add     rsp, 8008h
pop     rbx
pop     r14
pop     r15
pop     rbp
retn
call    ___stack_chk_fail
push    rbp
mov     rbp, rsp
push    r14
push    rbx
sub     rsp, 90h
mov     rbx, rdi
mov     edi, 8
call    sub_100003359
mov     r14, rax
xor     eax, eax
mov     [r14], rax
test    rbx, rbx
jz      short loc_10000119C
xor     esi, esi; int
xor     eax, eax
mov     rdi, rbx; char *
call    _open
mov     [r14], eax
cmp     eax, 0FFFFFFFFh
jnz     short loc_1000011AD
jmp     loc_1000012E9
lea     rcx, byte_100004A28
mov     byte ptr [rcx], 1
mov     dword ptr [r14], 0
lea     rbx, dword_1000049B4
cmp     dword ptr [rbx], 1
jnz     short loc_100001235
lea     rsi, [rbp+var_A0]
mov     edi, eax
call    _fstat$INODE64
cmp     eax, 0FFFFFFFFh
jz      short loc_10000122F
movzx   eax, [rbp+var_9C]
and     eax, 0F000h
cmp     eax, 8000h
jnz     short loc_10000122F
mov     rsi, [rbp+var_40]; size_t
mov     cs:qword_1000048E8, rsi
mov     r8d, [r14]; int
xor     edi, edi; void *
mov     edx, 1; int
mov     ecx, 402h; int
xor     r9d, r9d; off_t
call    _mmap
mov     cs:buf, rax
cmp     rax, 0FFFFFFFFFFFFFFFFh
jz      short loc_10000122F
mov     rsi, [rbp+var_40]; size_t
mov     cs:qword_1000048D0, rsi
mov     cs:qword_1000048D8, rax
mov     edx, 2; int
mov     rdi, rax; void *
call    _madvise
jmp     short loc_100001235
mov     dword ptr [rbx], 0
mov     rax, cs:buf
inc     rax
mov     ecx, 1
cmp     rax, rcx
ja      short loc_10000125A
mov     edi, 8000h
call    sub_100003359
mov     cs:buf, rax
mov     eax, [rbx]
cmp     eax, 2
jnz     short loc_10000127E
mov     edi, [r14]; fd
lea     rsi, mode; "r"
call    _gzdopen
mov     cs:file, rax
test    rax, rax
jz      short loc_1000012E1
mov     eax, [rbx]
cmp     eax, 3
jnz     short loc_10000129E
mov     edi, [r14]; fd
lea     rsi, mode; "r"
call    _BZ2_bzdopen
mov     cs:b, rax
test    rax, rax
jz      short loc_1000012E1
cmp     cs:qword_1000048D0, 0
jz      short loc_1000012D5
lea     rax, dword_1000049B0
cmp     dword ptr [rax], 2
jz      short loc_1000012F4
mov     rdi, cs:qword_1000048D8; void *
mov     rdx, cs:qword_1000048D0; size_t
xor     esi, esi; int
call    _memchr
test    rax, rax
jz      short loc_1000012F4
mov     byte ptr [r14+4], 1
jmp     short loc_1000012F4
mov     rdi, r14
call    sub_100000F5D
test    eax, eax
jz      short loc_1000012A8
mov     edi, [r14]; int
call    _close
mov     rdi, r14; void *
call    _free
xor     r14d, r14d
mov     rax, r14
add     rsp, 90h
pop     rbx
pop     r14
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    rbx
push    rax
mov     edi, [rdi]; int
call    _close
lea     rax, dword_1000049B4
cmp     dword ptr [rax], 1
jnz     short loc_10000133E
mov     rdi, cs:buf; void *
mov     rsi, cs:qword_1000048E8; size_t
call    _munmap
mov     cs:buf, 0
xor     eax, eax
jmp     short loc_100001345
mov     rax, cs:buf
mov     cs:qword_1000048D8, rax
xor     ebx, ebx
mov     cs:qword_1000048D0, rbx
mov     rdi, cs:qword_1000048E0; void *
call    _free
mov     cs:qword_1000048E0, rbx
mov     cs:qword_100004908, rbx
add     rsp, 8
pop     rbx
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
sub     rsp, 0B8h
mov     rbx, rsi
mov     r15d, edi
lea     rsi, asc_100003A60; ""
xor     edi, edi; int
call    _setlocale
call    _getprogname
mov     cl, [rax]
cmp     cl, 77h
jg      short loc_1000013C8
cmp     cl, 62h
jz      short loc_1000013E1
cmp     cl, 6Ch
jnz     short loc_100001407
cmp     byte ptr [rax+1], 7Ah
jnz     short loc_100001407
mov     cs:dword_1000049B4, 5
jmp     short loc_100001403
cmp     cl, 78h
jz      short loc_1000013F3
cmp     cl, 7Ah
jnz     short loc_100001407
mov     cs:dword_1000049B4, 2
inc     rax
jmp     short loc_100001407
cmp     byte ptr [rax+1], 7Ah
jnz     short loc_100001407
mov     cs:dword_1000049B4, 3
jmp     short loc_100001403
cmp     byte ptr [rax+1], 7Ah
jnz     short loc_100001407
mov     cs:dword_1000049B4, 4
add     rax, 2
movsx   eax, byte ptr [rax]
cmp     eax, 66h
mov     [rbp+var_38], rbx
jz      short loc_100001424
cmp     eax, 65h
jnz     short loc_10000142E
mov     cs:dword_1000048B8, 2
jmp     short loc_10000142E
mov     cs:dword_1000048B8, 0
lea     rdi, aGrepOptions; "GREP_OPTIONS"
call    _getenv
mov     rbx, rax
mov     [rbp+var_48], rbx
test    rbx, rbx
jz      loc_10000151A
mov     r14b, [rbx]
test    r14b, r14b
jz      loc_10000151A
mov     rdi, rbx; char *
call    _strlen
xor     edi, edi
cmp     r14b, 20h
setz    dil
cmp     rax, 2
mov     [rbp+var_30], r15
jb      short loc_100001491
mov     ecx, 2
mov     edx, 1
xor     esi, esi
cmp     byte ptr [rbx+rdx], 20h
setz    sil
add     edi, esi
mov     edx, ecx
inc     ecx
cmp     rdx, rax
jb      short loc_10000147C
inc     edi
shl     rdi, 3
call    sub_100003359
mov     rbx, rax
xor     r15d, r15d
lea     r13, asc_100003BCA; " "
lea     r12, [rbp+var_48]
mov     r14, [rbp+var_38]
jmp     short loc_1000014CA
cmp     byte ptr [rax], 0
jz      short loc_1000014CA
mov     rdi, rax
call    sub_1000033C2
mov     ecx, r15d
inc     r15d
mov     [rbx+rcx*8], rax
mov     rdi, r12; char **
mov     rsi, r13; char *
call    _strsep
test    rax, rax
jnz     short loc_1000014B3
mov     r12, [rbp+var_30]
lea     edi, [r15+r12+1]
mov     esi, 8
call    sub_10000337C
mov     rcx, [r14]
mov     [rax], rcx
test    r15d, r15d
jz      short loc_100001520
mov     ecx, r15d
mov     rdx, rax
add     rdx, 8
mov     rsi, [rbx]
mov     [rdx], rsi
add     rbx, 8
add     rdx, 8
dec     rcx
jnz     short loc_100001502
mov     ecx, r15d
jmp     short loc_100001522
mov     rsi, [rbp+var_38]
jmp     short loc_10000154E
xor     ecx, ecx
add     r15d, r12d
cmp     r12d, 2
jl      short loc_10000154B
mov     edx, r12d
add     r14, 8
dec     rdx
inc     ecx
mov     rsi, [r14]
mov     edi, ecx
mov     [rax+rdi*8], rsi
add     r14, 8
inc     ecx
dec     rdx
jnz     short loc_100001537
mov     rsi, rax; char **
mov     dword ptr [rbp+var_30], 1
xor     r13d, r13d
mov     ebx, 1
mov     dword ptr [rbp+var_38], 1
jmp     loc_100001C43
add     r13d, 0FFFFFFD0h; jumptable 0000000100001C7F cases 49-58
cmp     r13d, 9
ja      short loc_100001592
test    ebx, ebx
jnz     short loc_100001592
mov     rax, cs:qword_1000049C8
mov     rcx, 0CCCCCCCCCCCCCCDh
cmp     rax, rcx
jb      short loc_10000159F
jmp     loc_100001EAD
mov     cs:qword_1000049C8, 0
xor     eax, eax
lea     rax, [rax+rax*4]
movsxd  rcx, r14d
lea     rax, [rcx+rax*2-30h]
mov     cs:qword_1000049D0, rax
mov     cs:qword_1000049C8, rax
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049BC, 2; jumptable 0000000100001C7F cases 83,115
mov     cs:byte_1000049D8, 1; jumptable 0000000100001C7F case 73
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A19, 1; jumptable 0000000100001C7F cases 106,122
or      byte ptr cs:dword_1000048B0, 2
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A00, 1; jumptable 0000000100001C7F case 136
mov     rax, cs:_optarg_ptr
mov     rdi, [rax]
xor     esi, esi
call    sub_10000222F
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049E8, 1; jumptable 0000000100001C7F case 138
mov     rax, cs:_optarg_ptr
mov     rdi, [rax]
xor     esi, esi
call    sub_1000022A2
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 129
mov     rbx, [rax]
lea     rdi, aBinary; "binary"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      short loc_100001677; jumptable 0000000100001C7F case 86
lea     rdi, aWithoutMatch; "without-match"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      short loc_100001686; jumptable 0000000100001C7F case 74
lea     rdi, aText; "text"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jnz     loc_100001F3E
mov     cs:dword_1000049B0, 2; jumptable 0000000100001C7F case 98
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049B0, 0; jumptable 0000000100001C7F case 86
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049B0, 1; jumptable 0000000100001C7F case 74
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049E9, 1; jumptable 0000000100001C7F case 139
mov     rax, cs:_optarg_ptr
mov     rdi, [rax]
mov     esi, 1
call    sub_1000022A2
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A38, 1; jumptable 0000000100001C7F case 110
call    ___error
mov     dword ptr [rax], 0
mov     rax, cs:_optarg_ptr
mov     rdi, [rax]; char *
lea     rsi, [rbp+var_40]; char **
mov     edx, 0Ah; int
call    _strtoll
mov     cs:qword_100004A30, rax
call    ___error
cmp     dword ptr [rax], 22h
jnz     short loc_100001707
mov     rax, 7FFFFFFFFFFFFFFFh
cmp     cs:qword_100004A30, rax
jz      loc_100001EC5
call    ___error
cmp     dword ptr [rax], 16h
jnz     short loc_100001721
mov     rax, cs:qword_100004A30
test    rax, rax
jz      loc_100001EC5
mov     rax, [rbp+var_40]
cmp     byte ptr [rax], 0
jz      loc_100001BF2; jumptable 0000000100001C7F cases 118,132
jmp     loc_100001EBA
mov     cs:byte_100004A3B, 1; jumptable 0000000100001C7F case 112
jmp     loc_100001BEB
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 102
mov     rdi, [rax]
call    sub_1000021C0
jmp     loc_100001AE8
mov     cs:byte_100004C68, 1; jumptable 0000000100001C7F case 119
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:qword_1000049E0, 0; jumptable 0000000100001C7F case 130
mov     rax, cs:_optarg_ptr
mov     rbx, [rax]
test    rbx, rbx
jz      loc_100001B92
lea     rdi, aAuto; "auto"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001B92
lea     rdi, aTty; "tty"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001B92
lea     rdi, aIfTty; "if-tty"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001B92
lea     rdi, aAlways; "always"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001BC7
lea     rdi, aYes; "yes"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001BC7
lea     rdi, aForce; "force"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001BC7
lea     rdi, aNever; "never"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001BEB
lea     rdi, aNone; "none"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001BEB
lea     rdi, aNo; "no"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001BEB
jmp     loc_100001F7F
mov     cs:dword_1000048B8, 2; jumptable 0000000100001C7F case 70
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000048B8, 1; jumptable 0000000100001C7F case 72
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049B4, 4; jumptable 0000000100001C7F case 89
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049C0, 2; jumptable 0000000100001C7F case 113
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 68
cmp     qword ptr [rax], 0
jz      loc_100001C0E
call    ___error; jumptable 0000000100001C7F cases 66,67
mov     dword ptr [rax], 0
mov     rax, cs:_optarg_ptr
mov     rdi, [rax]; char *
lea     rsi, [rbp+var_40]; char **
mov     edx, 0Ah; int
call    _strtoull
mov     rbx, rax
call    ___error
cmp     rbx, 0FFFFFFFFFFFFFFFFh
jnz     short loc_1000018D8
cmp     dword ptr [rax], 22h
jz      loc_100001EC5
call    ___error
test    rbx, rbx
jnz     short loc_1000018EB
cmp     dword ptr [rax], 16h
jz      loc_100001EC5
mov     rax, [rbp+var_40]
cmp     byte ptr [rax], 0
jnz     loc_100001EBA
cmp     r14d, 41h
jz      short loc_10000190F
cmp     r14d, 42h
mov     cs:qword_1000049D0, rbx
jz      loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:qword_1000049C8, rbx
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 69
mov     rbx, [rax]
lea     rsi, aSkip; "skip"
mov     rdi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001C18
lea     rsi, aRead; "read"
mov     rdi, rbx; char *
call    _strcasecmp
test    eax, eax
jnz     loc_100001F26
mov     cs:dword_1000049B8, 0
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A29, 0; jumptable 0000000100001C7F case 77
mov     cs:byte_1000049D9, 1
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049DB, 1; jumptable 0000000100001C7F case 100
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 101
mov     rbx, [rax]
lea     rdi, aRecurse; "recurse"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001C24
lea     rdi, aSkip; "skip"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      loc_100001C37
lea     rdi, aRead; "read"
mov     rsi, rbx; char *
call    _strcasecmp
test    eax, eax
jnz     loc_100001F4E
mov     cs:dword_1000049BC, 0
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004C61, 1; jumptable 0000000100001C7F case 116
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A02, 1; jumptable 0000000100001C7F case 137
mov     rax, cs:_optarg_ptr
mov     rdi, [rax]
mov     esi, 1
call    sub_10000222F
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049B4, 3; jumptable 0000000100001C7F case 75
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A51, 1; jumptable 0000000100001C7F case 114
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 134
mov     rax, [rax]
mov     cs:qword_100004A20, rax
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049C0, 1; jumptable 0000000100001C7F case 80
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     rax, cs:_optarg_ptr; jumptable 0000000100001C7F case 103
mov     rbx, [rax]
lea     rsi, mode; "r"
mov     rdi, rbx; char *
call    _fopen
mov     r13, rax
test    r13, r13
jz      loc_100001F10
mov     rdi, r13; FILE *
call    _fileno
lea     rsi, [rbp+var_E0]
mov     edi, eax
call    _fstat$INODE64
cmp     eax, 0FFFFFFFFh
jz      short loc_100001AE0
movzx   eax, [rbp+var_DC]
and     eax, 0F000h
cmp     eax, 4000h
jz      short loc_100001AE0
mov     [rbp+var_30], rbx
lea     rsi, [rbp+var_50]
mov     rdi, r13
jmp     short loc_100001AC6
xor     esi, esi
cmp     byte ptr [rax], 0Ah
lea     rbx, [rbp+var_50]
cmovnz  rsi, [rbx]; size_t
mov     rdi, rax; void *
call    sub_10000237F
mov     rdi, r13; FILE *
mov     rsi, rbx; size_t *
call    _fgetln
test    rax, rax
jnz     short loc_100001AAB
mov     rdi, r13; FILE *
call    _ferror
test    eax, eax
jnz     loc_100001F68
mov     rdi, r13; FILE *
call    _fclose
mov     dword ptr [rbp+var_30], 0
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049D8, 0; jumptable 0000000100001C7F case 105
mov     cs:byte_100004A18, 1
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000048B8, 0; jumptable 0000000100001C7F case 71
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049D9, 0; jumptable 0000000100001C7F case 109
mov     cs:byte_100004A29, 1
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A3A, 1; jumptable 0000000100001C7F case 135
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049C0, 0; jumptable 0000000100001C7F case 84
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004A39, 1; jumptable 0000000100001C7F case 111
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049B4, 5; jumptable 0000000100001C7F case 78
jmp     loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004C6A, 1; jumptable 0000000100001C7F case 121
jmp     loc_100001BEB
mov     cs:dword_1000049B4, 2; jumptable 0000000100001C7F case 91
jmp     short loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049DA, 1; jumptable 0000000100001C7F case 99
jmp     short loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_100004C69, 1; jumptable 0000000100001C7F case 120
jmp     short loc_100001BEB
mov     cs:byte_100004A28, 1; jumptable 0000000100001C7F case 133
jmp     short loc_100001BF2; jumptable 0000000100001C7F cases 118,132
lea     rdi, aTerm; "TERM"
call    _getenv
mov     rbx, rax
mov     edi, 1; int
call    _isatty
test    rbx, rbx
jz      short loc_100001BEB
test    eax, eax
jz      short loc_100001BEB
lea     rsi, aDumb; "dumb"
mov     rdi, rbx; char *
call    _strcasecmp
test    eax, eax
jz      short loc_100001BEB
lea     rdi, aGrepColor; "GREP_COLOR"
call    _getenv
test    rax, rax
jz      short loc_100001BDD
cmp     byte ptr [rax], 0
jnz     short loc_100001BE4
lea     rax, a0131; "01;31"
mov     cs:qword_1000049E0, rax
and     byte ptr cs:dword_1000048B0, 0FBh
mov     rax, cs:_optind_ptr; jumptable 0000000100001C7F cases 118,132
mov     eax, [rax]
xor     ebx, ebx
cmp     eax, dword ptr [rbp+var_38]
setnz   bl
mov     r13d, r14d
mov     dword ptr [rbp+var_38], eax
mov     rsi, r12
jmp     short loc_100001C43
mov     eax, 2
jmp     loc_1000015AB
mov     cs:dword_1000049B8, 1
jmp     short loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:byte_1000049D8, 1
mov     cs:dword_1000049BC, 2
jmp     short loc_100001BF2; jumptable 0000000100001C7F cases 118,132
mov     cs:dword_1000049BC, 1
jmp     short loc_100001BF2; jumptable 0000000100001C7F cases 118,132
xor     r8d, r8d; int *
mov     edi, r15d; int
mov     r12, rsi
lea     rdx, a0123456789aBCD; "0123456789A:B:C:D:EFGHIJMLOPSRUVZabcd:e"...
lea     rcx, stru_100004260; struct option *
call    _getopt_long
mov     r14d, eax
lea     eax, [r14+1]
cmp     eax, 8Bh; switch 140 cases
ja      loc_100001E7E; jumptable 0000000100001C7F default case
lea     rcx, off_100001F90
movsxd  rax, dword ptr [rcx+rax*4]
add     rax, rcx
jmp     rax; switch jump
mov     rax, cs:_optind_ptr; jumptable 0000000100001C7F case 0
movsxd  rax, dword ptr [rax]
mov     ecx, cs:dword_100004A4C
mov     edx, dword ptr [rbp+var_30]
or      ecx, edx
jnz     short loc_100001CA6
mov     cl, cs:byte_100004A2A
test    cl, cl
jz      loc_100001ED3
sub     r15d, eax
test    edx, edx
jz      short loc_100001CB6
test    r15d, r15d
jz      loc_100001EDD
lea     rbx, [r12+rax*8]
test    edx, edx
jz      short loc_100001CD2
test    r15d, r15d
jz      short loc_100001CD2
mov     rdi, [rbx]
call    sub_1000021C0
dec     r15d
add     rbx, 8
mov     eax, cs:dword_1000048B8
test    eax, eax
jz      short loc_100001CF3
cmp     eax, 2
jz      short loc_100001CFC
cmp     eax, 1
jnz     loc_100001EE2
or      byte ptr cs:dword_1000048B0+1, 1
jmp     short loc_100001D06
or      byte ptr cs:dword_1000048B0, 10h
jmp     short loc_100001D06
or      cs:dword_1000048B0, 101h
mov     edi, cs:dword_100004A4C
mov     esi, 20h
call    sub_10000337C
mov     cs:qword_100004A58, rax
cmp     cs:dword_100004A4C, 0
jz      loc_100001DC8
mov     rcx, cs:qword_100004A40
mov     rsi, [rcx]; char *
mov     edx, cs:dword_1000048B0; int
mov     rdi, rax; regex_t *
call    _regcomp
test    eax, eax
jnz     loc_100001F36
mov     r12d, 1
cmp     r12d, cs:dword_100004A4C
jnb     short loc_100001DC8
mov     r14d, r12d
mov     rdi, r14
shl     rdi, 5
add     rdi, cs:qword_100004A58; regex_t *
mov     rax, cs:qword_100004A40
mov     rcx, r14
shl     rcx, 4
mov     rsi, [rax+rcx]; char *
mov     edx, cs:dword_1000048B0; int
call    _regcomp
inc     r12d
test    eax, eax
jz      short loc_100001D50
shl     r14, 5
add     r14, cs:qword_100004A58
lea     rbx, byte_100004A60
mov     ecx, 200h; size_t
mov     edi, eax; int
mov     rsi, r14; regex_t *
mov     rdx, rbx; char *
call    _regerror
lea     rsi, aS; "%s"
mov     edi, 2; int
xor     eax, eax
mov     rdx, rbx
call    _errx
cmp     cs:byte_100004A28, 0
jz      short loc_100001DE0
mov     rax, cs:___stdoutp_ptr
mov     rdi, [rax]; FILE *
call    _setlinebuf
mov     eax, r15d
or      eax, 1
mov     ecx, 1
cmp     eax, ecx
jnz     short loc_100001E00
mov     al, cs:byte_1000049D8
test    al, al
jnz     short loc_100001E00
mov     cs:byte_100004A18, 1
test    r15d, r15d
jz      loc_100001EE7
cmp     cs:dword_1000049BC, 2
jz      loc_100001F00
xor     r14d, r14d
dec     r15d
mov     al, cs:byte_100004A00
or      al, cs:byte_100004A02
jz      short loc_100001E36
mov     rdi, [rbx]; char *
call    sub_1000025C4
test    al, al
jz      short loc_100001E41
mov     rdi, [rbx]; char *
call    sub_100002914
add     r14d, eax
add     rbx, 8
test    r15d, r15d
jnz     short loc_100001E19
test    r14d, r14d
mov     al, cs:byte_100004A01
jnz     short loc_100001E5F
movzx   edi, al
inc     edi; int
call    _exit
xor     edi, edi; int
test    al, al
jz      short loc_100001E79
xor     edi, edi
cmp     cs:byte_100004A51, 0
setz    dil
add     edi, edi; int
call    _exit
call    _exit
call    sub_100002315; jumptable 0000000100001C7F default case
mov     rbx, cs:off_1000048A8; jumptable 0000000100001C7F case 87
call    _getprogname
mov     rcx, rax
lea     rdx, a251Freebsd; "2.5.1-FreeBSD"
xor     eax, eax
mov     rdi, rbx; char *
mov     rsi, rcx
call    _printf
xor     edi, edi; int
call    _exit
call    ___error
mov     dword ptr [rax], 22h
jmp     short loc_100001EC5
call    ___error
mov     dword ptr [rax], 16h
mov     edi, 2; int
xor     esi, esi; char *
xor     eax, eax
call    _err
mov     edi, 1; int
call    _exit
call    sub_100002315
call    sub_100002315
lea     rdi, asc_100003C77; "-"
call    sub_100002914
xor     edi, edi
test    eax, eax
setz    dil; int
call    _exit
mov     rdi, rbx
call    sub_10000266E
mov     r14d, eax
jmp     loc_100001E4A
lea     rsi, aS; "%s"
mov     edi, 2; int
xor     eax, eax
mov     rdx, rbx
call    _err
mov     rsi, cs:off_100004878
lea     rdx, aDevices; "--devices"
jmp     short loc_100001F5C
xor     r14d, r14d
jmp     loc_100001D8E
mov     rsi, cs:off_100004878
lea     rdx, aBinaryFiles; "--binary-files"
jmp     short loc_100001F5C
mov     rsi, cs:off_100004878; char *
lea     rdx, aDirectories; "--directories"
mov     edi, 2; int
xor     eax, eax
call    _errx
lea     rsi, aS; "%s"
mov     edi, 2; int
xor     eax, eax
mov     rdx, [rbp+var_30]
call    _err
mov     rsi, cs:off_100004878
lea     rdx, aColor; "--color"
jmp     short loc_100001F5C
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    rbx
push    rax
call    sub_1000033C2
lea     rdi, [rbp+var_20]; char **
mov     [rdi], rax
lea     rsi, asc_100003E90; "\n"
call    _strsep
mov     rbx, rax
test    rbx, rbx
jz      short loc_10000221B
lea     r14, asc_100003E90; "\n"
lea     r15, [rbp+var_20]
mov     rdi, rbx; char *
call    _strlen
mov     rdi, rbx; void *
mov     rsi, rax; size_t
call    sub_10000237F
mov     rdi, r15; char **
mov     rsi, r14; char *
call    _strsep
mov     rbx, rax
test    rbx, rbx
jnz     short loc_1000021F5
mov     rdi, [rbp+var_20]; void *
call    _free
add     rsp, 8
pop     rbx
pop     r14
pop     r15
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r14
push    rbx
mov     r14d, esi
mov     rbx, rdi
mov     eax, cs:dword_100004A14
cmp     eax, cs:dword_100004A10
jnz     short loc_10000226B
mov     rdi, cs:qword_100004A08
lea     esi, [rax+rax+1]
mov     cs:dword_100004A10, esi
shl     rsi, 4
call    sub_10000339F
mov     cs:qword_100004A08, rax
mov     rdi, rbx
call    sub_1000033C2
mov     rcx, cs:qword_100004A08
mov     edx, cs:dword_100004A14
lea     esi, [rdx+1]
shl     rdx, 4
mov     [rcx+rdx], rax
mov     rax, cs:qword_100004A08
mov     [rax+rdx+8], r14d
mov     cs:dword_100004A14, esi
pop     rbx
pop     r14
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r14
push    rbx
mov     r14d, esi
mov     rbx, rdi
mov     eax, cs:dword_1000049FC
cmp     eax, cs:dword_1000049F8
jnz     short loc_1000022DE
mov     rdi, cs:qword_1000049F0
lea     esi, [rax+rax+1]
mov     cs:dword_1000049F8, esi
shl     rsi, 4
call    sub_10000339F
mov     cs:qword_1000049F0, rax
mov     rdi, rbx
call    sub_1000033C2
mov     rcx, cs:qword_1000049F0
mov     edx, cs:dword_1000049FC
lea     esi, [rdx+1]
shl     rdx, 4
mov     [rcx+rdx], rax
mov     rax, cs:qword_1000049F0
mov     [rax+rdx+8], r14d
mov     cs:dword_1000049FC, esi
pop     rbx
pop     r14
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    rbx
push    rax
mov     r15, cs:___stderrp_ptr
mov     r14, [r15]
mov     rbx, cs:off_100004880
call    _getprogname
mov     rcx, rax
xor     eax, eax
mov     rdi, r14; FILE *
mov     rsi, rbx; char *
mov     rdx, rcx
call    _fprintf
mov     rsi, [r15]; FILE *
mov     rdi, cs:off_100004888; char *
call    _fputs
mov     rsi, [r15]; FILE *
mov     rdi, cs:off_100004890; char *
call    _fputs
mov     rsi, [r15]; FILE *
mov     rdi, cs:off_100004898; char *
call    _fputs
mov     edi, 2; int
call    _exit
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    rbx
push    rax
mov     rbx, rsi
mov     r14, rdi
cmp     cs:byte_100004A2A, 0
jnz     loc_100002444
test    rbx, rbx
jz      loc_10000243D
mov     eax, cs:dword_100004A4C
cmp     eax, cs:dword_100004A48
jnz     short loc_1000023D4
mov     rdi, cs:qword_100004A40
lea     esi, [rax+rax+1]
mov     cs:dword_100004A48, esi
shl     rsi, 4
call    sub_10000339F
mov     cs:qword_100004A40, rax
lea     r15, [rbx-1]
cmp     byte ptr [r14+rbx-1], 0Ah
cmovnz  r15, rbx
lea     rdi, [r15+1]
call    sub_100003359
mov     rcx, cs:qword_100004A40
mov     edx, cs:dword_100004A4C
shl     rdx, 4
mov     [rcx+rdx], rax
mov     rax, cs:qword_100004A40
mov     rdi, [rax+rdx]; void *
mov     rsi, r14; void *
mov     rdx, r15; size_t
call    _memcpy
mov     rax, cs:qword_100004A40
mov     ecx, cs:dword_100004A4C
shl     rcx, 4
mov     [rax+rcx+8], r15d
mov     rax, [rax+rcx]
mov     byte ptr [rax+r15], 0
inc     cs:dword_100004A4C
jmp     short loc_100002444
mov     cs:byte_100004A2A, 1
add     rsp, 8
pop     rbx
pop     r14
pop     r15
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r14
push    rbx
mov     r14, rdi
mov     edi, 30h
call    sub_100003359
mov     rbx, rax
mov     rdi, [r14+8]
call    sub_100003359
mov     [rbx+18h], rax
mov     ecx, [r14+20h]
mov     [rbx+28h], ecx
movups  xmm0, xmmword ptr [r14]
movups  xmmword ptr [rbx+8], xmm0
mov     rdx, [r14+8]; size_t
mov     rsi, [r14+10h]; void *
mov     rdi, rax; void *
call    _memcpy
mov     rax, [r14+18h]
mov     [rbx+20h], rax
mov     qword ptr [rbx], 0
mov     rax, cs:off_1000048C8
mov     [rax], rbx
mov     cs:off_1000048C8, rbx
mov     rax, cs:qword_100004998
lea     rcx, [rax+1]
mov     cs:qword_100004998, rcx
lea     rdx, qword_1000049D0
cmp     rcx, [rdx]
jbe     short loc_100002502
mov     rdi, cs:qword_1000048C0
test    rdi, rdi
jz      short loc_100002507
mov     rcx, [rdi]
mov     cs:qword_1000048C0, rcx
test    rcx, rcx
jnz     short loc_1000024F9
lea     rcx, qword_1000048C0
mov     cs:off_1000048C8, rcx
mov     cs:qword_100004998, rax
jmp     short loc_100002509
pop     rbx
pop     r14
pop     rbp
retn
xor     edi, edi; void *
pop     rbx
pop     r14
pop     rbp
jmp     _free
push    rbp
mov     rbp, rsp
push    r14
push    rbx
mov     rbx, cs:qword_1000048C0
test    rbx, rbx
jz      short loc_10000256F
lea     r14, qword_1000048C0
mov     rax, [rbx]
mov     cs:qword_1000048C0, rax
test    rax, rax
jnz     short loc_100002542
mov     cs:off_1000048C8, r14
dec     cs:qword_100004998
lea     rdi, [rbx+8]
mov     esi, 2Dh
xor     edx, edx
xor     ecx, ecx
call    sub_1000033E5
mov     rdi, rbx; void *
call    _free
mov     rbx, cs:qword_1000048C0
test    rbx, rbx
jnz     short loc_10000252C
pop     rbx
pop     r14
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    rbx
push    rax
mov     rdi, cs:qword_1000048C0; void *
test    rdi, rdi
jz      short loc_1000025BB
lea     rbx, qword_1000048C0
mov     rax, [rdi]
mov     cs:qword_1000048C0, rax
test    rax, rax
jnz     short loc_1000025A3
mov     cs:off_1000048C8, rbx
dec     cs:qword_100004998
call    _free
mov     rdi, cs:qword_1000048C0
test    rdi, rdi
jnz     short loc_10000258D
add     rsp, 8
pop     rbx
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
push    rax
mov     r14, rdi
lea     rax, byte_100004A02
mov     r13b, [rax]
xor     r13b, 1
call    _basename
mov     [rbp+var_30], rax
lea     rax, dword_100004A14
cmp     dword ptr [rax], 0
jz      short loc_100002653
xor     ebx, ebx
lea     r12, qword_100004A08
mov     rax, [r12]
mov     ebx, ebx
mov     r15, rbx
shl     r15, 4
mov     rdi, [rax+r15]; char *
xor     edx, edx; int
mov     rsi, r14; char *
call    _fnmatch
test    eax, eax
jz      short loc_100002637
mov     rax, [r12]
mov     rdi, [rax+r15]; char *
xor     edx, edx; int
mov     rsi, [rbp+var_30]; char *
call    _fnmatch
test    eax, eax
jnz     short loc_100002646
mov     rax, [r12]
mov     r13b, 1
cmp     dword ptr [rax+r15+8], 0
jz      short loc_100002659
inc     ebx
lea     rax, dword_100004A14
cmp     ebx, [rax]
jb      short loc_100002601
and     r13b, 1
jmp     short loc_10000265C
xor     r13d, r13d
mov     eax, r13d
add     rsp, 8
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
retn
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
sub     rsp, 18h
lea     rax, dword_1000049C0
mov     eax, [rax]
cmp     eax, 2
mov     ecx, 1Ch
mov     edx, 0Eh
cmovz   edx, ecx
cmp     eax, 1
mov     esi, 0Dh
cmovnz  esi, edx
xor     eax, eax
mov     [rbp+var_30], rax
xor     edx, edx
call    _fts_open$INODE64
mov     r12, rax
test    r12, r12
jz      loc_1000028E4
mov     rdi, r12
call    _fts_read$INODE64
mov     r15, rax
test    r15, r15
jz      loc_1000028C9
lea     rbx, off_1000028F8
xor     eax, eax
mov     [rbp+var_30], rax
mov     [rbp+var_38], r12
jmp     short loc_1000026EC
mov     r12, [rbp+var_38]
jmp     loc_1000028AE
movzx   eax, word ptr [r15+58h]
dec     eax
movzx   eax, ax
cmp     eax, 6; switch 7 cases
ja      loc_1000027EA; jumptable 0000000100002706 default case
movsxd  rax, dword ptr [rbx+rax*4]
add     rax, rbx
jmp     rax; switch jump
lea     rax, byte_1000049E9; jumptable 0000000100002706 cases 0,5
mov     r14b, [rax]
lea     rax, byte_1000049E8
mov     al, [rax]
or      al, r14b
jz      loc_1000028B5
xor     r14b, 1
lea     rax, dword_1000049FC
cmp     dword ptr [rax], 0
jz      loc_100002827
lea     r12, [r15+68h]
xor     ebx, ebx
lea     rax, qword_1000049F0
mov     rax, [rax]
mov     ebx, ebx
mov     r13, rbx
shl     r13, 4
mov     rdi, [rax+r13]; char *
xor     edx, edx; int
mov     rsi, r12; char *
call    _fnmatch
test    eax, eax
jnz     short loc_10000277C
lea     rax, qword_1000049F0
mov     rax, [rax]
mov     r14b, 1
cmp     dword ptr [rax+r13+8], 0
jz      loc_10000289A
inc     ebx
lea     rax, dword_1000049FC
mov     eax, [rax]
cmp     ebx, eax
jb      short loc_10000273E
jmp     loc_100002829
lea     rax, byte_100004A01; jumptable 0000000100002706 cases 3,6
mov     byte ptr [rax], 1
lea     rax, byte_100004C61
cmp     byte ptr [rax], 0
jnz     loc_1000028B5
mov     r14, [r15+30h]
mov     edi, [r15+38h]; int
call    _strerror
mov     rcx, rax
xor     eax, eax
lea     rdi, aSS; "%s: %s"
mov     rsi, r14
mov     rdx, rcx
call    _warnx
jmp     loc_1000028B5
mov     rsi, [r15+30h]; jumptable 0000000100002706 case 1
xor     eax, eax
lea     rdi, aWarningSRecurs; "warning: %s: recursive directory loop"
call    _warnx
jmp     loc_1000028B5
lea     rax, byte_100004A02; jumptable 0000000100002706 default case
mov     al, [rax]
lea     rcx, byte_100004A00
or      al, [rcx]
jz      short loc_10000280F
mov     rdi, [r15+30h]; char *
call    sub_1000025C4
test    al, al
jz      loc_1000028B5
mov     rdi, [r15+30h]; char *
call    sub_100002914
mov     rcx, [rbp+var_30]
add     ecx, eax
mov     [rbp+var_30], rcx
jmp     loc_1000028B5
xor     eax, eax
test    r14b, 1
jz      short loc_10000289A
lea     rcx, byte_1000049E9
mov     bl, [rcx]
xor     bl, 1
test    eax, eax
jz      short loc_100002891
mov     r12, [r15+30h]
xor     r14d, r14d
test    r12, r12
jz      short loc_100002882
lea     rax, qword_1000049F0
mov     rax, [rax]
mov     r13d, r14d
shl     r13, 4
mov     rdi, [rax+r13]; char *
xor     edx, edx; int
mov     rsi, r12; char *
call    _fnmatch
test    eax, eax
jnz     short loc_100002882
lea     rax, qword_1000049F0
mov     rax, [rax]
mov     bl, 1
cmp     dword ptr [rax+r13+8], 0
jz      short loc_10000289A
inc     r14d
lea     rax, dword_1000049FC
cmp     r14d, [rax]
jb      short loc_100002846
test    bl, 1
jnz     loc_1000026E3
mov     edx, 4
mov     r12, [rbp+var_38]
mov     rdi, r12
mov     rsi, r15
call    _fts_set$INODE64
lea     rbx, off_1000028F8
mov     rdi, r12
call    _fts_read$INODE64
mov     r15, rax
test    r15, r15
jnz     loc_1000026EC
mov     rdi, r12
call    _fts_close$INODE64
mov     rax, [rbp+var_30]
add     rsp, 18h
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
retn
lea     rsi, aFtsOpen; "fts_open"
mov     edi, 2; int
xor     eax, eax
call    _err
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
sub     rsp, 118h
mov     rbx, rdi
lea     r12, byte_100004A38
xor     r14d, r14d
cmp     byte ptr [r12], 0
lea     r13, qword_100004A30
jz      short loc_100002950
mov     rax, [r13+0]
test    rax, rax
jle     loc_10000333D
lea     rsi, asc_100003C77; "-"
mov     rdi, rbx; char *
call    _strcmp
test    eax, eax
jz      short loc_10000297F
lea     rsi, [rbp+var_140]
mov     rdi, rbx
call    _stat$INODE64
test    eax, eax
jz      loc_10000314F
mov     rdi, rbx
jmp     short loc_1000029C0
lea     rax, dword_1000049BC
cmp     dword ptr [rax], 2
jnz     short loc_1000029A4
xor     edi, edi; int
call    _isatty
test    eax, eax
jz      short loc_1000029A4
lea     rdi, aWarningRecursi; "warning: recursive search of stdin"
xor     eax, eax
call    _warnx
lea     rax, qword_100004A20
mov     rbx, [rax]
test    rbx, rbx
jnz     short loc_1000029BE
lea     rax, off_100004860
mov     rbx, [rax+8]
xor     edi, edi; char *
call    sub_10000115B
mov     [rbp+var_40], rax
test    rax, rax
jz      loc_10000311C
mov     rdi, rbx; char *
call    _strlen
lea     rdi, [rax+1]
call    sub_100003359
lea     r15, [rbp+var_98]
mov     [r15+10h], rax
mov     rdi, rax; char *
mov     rsi, rbx; char *
call    _strcpy
xor     r14d, r14d
mov     [r15+18h], r14d
mov     cs:dword_1000049A0, r14d
lea     rax, unk_100004C64
mov     [rax], r14d
mov     rax, 0FFFFFFFFFFFFFFFFh
movq    xmm0, rax
movdqa  xmmword ptr [r15-8], xmm0
mov     r15, rbx
mov     rbx, [rbp+var_40]
mov     [rbp+var_48], r15
test    r14d, r14d
jz      short loc_100002A4D
lea     rax, byte_100004A51
mov     al, [rax]
and     al, 1
lea     rcx, byte_100004A29
or      al, [rcx]
jnz     loc_1000031C1
mov     rax, [rbp+var_A0]
mov     rcx, [rbp+var_98]
lea     rax, [rcx+rax+1]
mov     [rbp+var_A0], rax
mov     rdi, rbx
lea     rsi, [rbp+var_98]
call    sub_100000D9C
mov     [rbp+var_90], rax
test    rax, rax
jz      loc_1000031AA
mov     rcx, [rbp+var_98]
test    rcx, rcx
jz      loc_1000031AA
cmp     byte ptr [rax+rcx-1], 0Ah
jnz     short loc_100002AA7
dec     rcx
mov     [rbp+var_98], rcx
inc     [rbp+var_80]
mov     al, [rbx+4]
mov     [rbp+var_29], al
test    al, al
jz      short loc_100002AC4
lea     rax, dword_1000049B0
cmp     dword ptr [rax], 1
jz      loc_10000331E
mov     [rbp+var_A4], r14d
mov     edi, 200h
call    sub_100003359
mov     [rbp+var_50], rax
lea     rax, byte_100004A2A
cmp     byte ptr [rax], 0
jz      short loc_100002B00
lea     rax, byte_100004C68
mov     al, [rax]
mov     [rbp+var_34], 0
xor     al, 1
movzx   r14d, al
jmp     loc_100002F6B
mov     [rbp+var_5C], 20h
xor     r13d, r13d
mov     rax, [rbp+var_98]
mov     [rbp+var_34], 0
xor     r14d, r14d
xor     ebx, ebx
lea     r12, dword_100004A4C
jmp     short loc_100002B2F
mov     r14d, [rbp+var_30]
jmp     loc_100002E95
mov     [rbp+var_70], rbx
mov     [rbp+var_68], rax
cmp     dword ptr [r12], 0
jz      loc_100002E9D
xor     r15d, r15d
cmp     [rbp+var_29], 0
jz      short loc_100002B59
xor     edi, edi; int
lea     rsi, aC; "C"
call    _setlocale
mov     edi, r15d
shl     rdi, 5
lea     rax, qword_100004A58
add     rdi, [rax]; regex_t *
mov     rsi, [rbp+var_90]; char *
lea     rax, unk_1000048B4
mov     r8d, [rax]; int
mov     edx, 1; size_t
lea     rcx, [rbp+var_70]; pmatch
call    _regexec
mov     ebx, eax
cmp     [rbp+var_29], 0
jz      short loc_100002B9F
xor     edi, edi; int
lea     rsi, asc_100003A60; ""
call    _setlocale
xor     r13d, r13d
test    ebx, ebx
setnz   r13b
lea     rax, dword_1000048B0
mov     r8d, [rax]
mov     rbx, [rbp+var_98]
mov     r9, [rbp+var_68]
jnz     loc_100002E88
lea     rax, byte_100004C6A
cmp     byte ptr [rax], 0
jz      short loc_100002BE3
cmp     [rbp+var_70], 0
jnz     loc_100002C99
cmp     r9, rbx
jnz     loc_100002C99
lea     rax, byte_100004C69
cmp     byte ptr [rax], 0
jz      loc_100002DC9
test    r13b, r13b
jnz     loc_100002DC9
mov     eax, 20h
mov     [rbp+var_54], eax
mov     [rbp+var_58], eax
mov     rax, [rbp+var_70]
test    rax, rax
mov     rdx, rbx
mov     rsi, r9
mov     [rbp+var_30], r14d
jz      loc_100002CDB
mov     rcx, cs:___mb_cur_max_ptr
movsxd  r12, dword ptr [rcx]
cmp     r12, rax
cmovl   r12, rax
test    r12, r12
jz      short loc_100002CA4
mov     [rbp+var_B0], r9
mov     [rbp+var_60], r8d
mov     [rbp+var_78], rbx
mov     rcx, [rbp+var_90]
lea     rbx, [rcx+rax-1]
mov     r14d, 1
lea     rdi, [rbp+var_58]; wchar_t *
mov     rsi, rbx; char *
mov     rdx, r14; size_t
call    _mbtowc
cmp     eax, 0FFFFFFFFh
jnz     short loc_100002CB6
inc     r14
dec     rbx
cmp     r14, r12
jbe     short loc_100002C55
mov     r13d, 1
mov     r14d, [rbp+var_30]
lea     r12, dword_100004A4C
mov     rbx, [rbp+var_78]
mov     r8d, [rbp+var_60]
mov     r9, [rbp+var_B0]
jmp     loc_100002DC9
mov     r13d, 1
jmp     loc_100002E88
mov     r13d, 1
lea     r12, dword_100004A4C
jmp     loc_100002DC9
mov     rsi, [rbp+var_68]
mov     rdx, [rbp+var_98]
mov     r14d, [rbp+var_30]
lea     r12, dword_100004A4C
mov     rbx, [rbp+var_78]
mov     r8d, [rbp+var_60]
mov     r9, [rbp+var_B0]
sub     rdx, rsi
jz      short loc_100002D21
add     rsi, [rbp+var_90]; char *
mov     rax, cs:___mb_cur_max_ptr
movsxd  rax, dword ptr [rax]
cmp     rax, rdx
cmova   rdx, rax; size_t
lea     rdi, [rbp+var_54]; wchar_t *
mov     r14d, r8d
mov     r12, r9
call    _mbtowc
mov     r9, r12
mov     r8d, r14d
mov     r14d, [rbp+var_30]
lea     r12, dword_100004A4C
cmp     eax, 0FFFFFFFFh
jz      loc_100002DC3
movsxd  rdi, [rbp+var_58]; __darwin_ct_rune_t
cmp     rdi, 7Fh
ja      short loc_100002D3E
xor     ecx, ecx
mov     rax, cs:__DefaultRuneLocale_ptr
test    byte ptr [rax+rdi*4+3Dh], 5
setnz   cl
jmp     short loc_100002D69
mov     esi, 500h; unsigned __int64
mov     r14d, r8d
mov     r12, r9
call    ___maskrune
mov     r9, r12
mov     r8d, r14d
mov     r14d, [rbp+var_30]
lea     r12, dword_100004A4C
xor     ecx, ecx
test    eax, eax
setnz   cl
mov     edi, [rbp+var_58]
cmp     edi, 5Fh
jz      short loc_100002DC3
test    ecx, ecx
jnz     short loc_100002DC3
movsxd  rdi, [rbp+var_54]; __darwin_ct_rune_t
cmp     rdi, 7Fh
ja      short loc_100002D8F
xor     ecx, ecx
mov     rax, cs:__DefaultRuneLocale_ptr
test    byte ptr [rax+rdi*4+3Dh], 5
setnz   cl
jmp     short loc_100002DBA
mov     esi, 500h; unsigned __int64
mov     r14d, r8d
mov     r12, r9
call    ___maskrune
mov     r9, r12
mov     r8d, r14d
mov     r14d, [rbp+var_30]
lea     r12, dword_100004A4C
xor     ecx, ecx
test    eax, eax
setnz   cl
mov     edi, [rbp+var_54]
cmp     edi, 5Fh
jz      short loc_100002DC3
test    ecx, ecx
jz      short loc_100002DC9
mov     r13d, 1
test    r13d, r13d
jnz     loc_100002E88
mov     [rbp+var_78], rbx
mov     ebx, [rbp+var_34]
cmp     ebx, 1
adc     r14d, 0
mov     [rbp+var_30], r14d
cmp     ebx, 3FFFFFFFh
jg      short loc_100002E43
mov     eax, [rbp+var_5C]
cmp     ebx, eax
jge     short loc_100002DF9
mov     rax, [rbp+var_50]
jmp     short loc_100002E22
movsxd  rsi, eax
add     eax, 20h
mov     [rbp+var_5C], eax
shl     rsi, 4
add     rsi, 200h
mov     rdi, [rbp+var_50]
mov     r13d, r8d
mov     r14, r9
call    sub_10000339F
mov     r9, r14
mov     r8d, r13d
movsxd  rsi, ebx
inc     ebx
mov     [rbp+var_34], ebx
shl     rsi, 4
mov     rcx, [rbp+var_70]
mov     rdx, [rbp+var_68]
mov     [rax+rsi+8], rdx
mov     [rbp+var_50], rax
mov     [rax+rsi], rcx
lea     rax, qword_1000049E0
cmp     qword ptr [rax], 0
setnz   al
lea     rcx, byte_100004A3B
cmp     byte ptr [rcx], 0
setnz   cl
or      cl, al
xor     r13d, r13d
cmp     cl, 1
mov     rbx, [rbp+var_78]
jnz     loc_100002B26
lea     rax, byte_100004A29
mov     al, [rax]
lea     rcx, byte_100004A51
or      al, [rcx]
mov     r14d, [rbp+var_30]
jnz     short loc_100002E95
inc     r15d
cmp     r15d, [r12]
jb      loc_100002B45
test    r8b, 4
cmovz   rbx, r9
lea     rax, byte_100004C68
cmp     byte ptr [rax], 0
jnz     loc_100002F4A
cmp     r13d, 1
jnz     short loc_100002ED8
lea     rax, byte_100004C69
mov     al, [rax]
test    al, al
jz      short loc_100002ED8
cmp     rbx, [rbp+var_70]
jz      loc_100002F55
mov     rax, [rbp+var_98]
cmp     rbx, rax
jb      short loc_100002F1D
jmp     short loc_100002F55
lea     rax, qword_1000049E0
cmp     qword ptr [rax], 0
setnz   cl
lea     rax, byte_100004A3B
cmp     byte ptr [rax], 0
setnz   dl
mov     rax, [rbp+var_98]
cmp     rbx, rax
jnb     short loc_100002F55
cmp     rbx, [rbp+var_70]
jz      short loc_100002F55
or      cl, dl
jz      short loc_100002F55
lea     rcx, byte_100004A29
mov     cl, [rcx]
lea     rdx, byte_100004A51
or      cl, [rdx]
jnz     short loc_100002F55
lea     rcx, byte_100004A2A
cmp     byte ptr [rcx], 0
jz      loc_100002B2F
xor     eax, eax
mov     r15, [rbp+var_48]
mov     rbx, [rbp+var_40]
lea     r12, byte_100004A38
lea     r13, qword_100004A30
jmp     loc_100002AF5
xor     eax, eax
test    r14d, r14d
setz    al
mov     r14d, eax
mov     r15, [rbp+var_48]
mov     rbx, [rbp+var_40]
lea     r12, byte_100004A38
lea     r13, qword_100004A30
cmp     byte ptr [r12], 0
jz      short loc_100002F79
movsxd  rax, r14d
sub     [r13+0], rax
cmp     [rbp+var_29], 0
jz      short loc_100002F9F
test    r14d, r14d
jz      short loc_100002F9F
lea     rax, dword_1000049B0
mov     eax, [rax]
test    eax, eax
jnz     short loc_100002F9F
mov     rdi, [rbp+var_50]; void *
call    _free
jmp     loc_1000030F8
lea     rax, unk_100004C64
mov     eax, [rax]
mov     ecx, eax
or      ecx, r14d
jz      loc_100003086
lea     rcx, byte_100004A51
mov     cl, [rcx]
lea     rdx, byte_1000049DB
or      cl, [rdx]
lea     rdx, byte_100004A29
or      cl, [rdx]
lea     rdx, byte_1000049D9
or      cl, [rdx]
jnz     loc_100003086
test    r14d, r14d
jz      loc_10000309E
lea     rcx, unk_1000048BC
cmp     byte ptr [rcx], 0
jnz     short loc_10000301E
test    eax, eax
jnz     short loc_10000301E
lea     rax, unk_100004A50
mov     al, [rax]
test    al, al
jnz     short loc_10000301E
lea     rax, qword_1000049C8
mov     rax, [rax]
test    rax, rax
jz      short loc_10000301E
lea     rdi, asc_100003F3A; "--"
call    _puts
lea     rax, qword_1000049C8
mov     eax, [rax]
lea     rcx, unk_100004C64
mov     [rcx], eax
lea     rax, qword_1000049D0
cmp     qword ptr [rax], 0
jz      short loc_100003062
lea     rax, unk_100004A50
mov     al, [rax]
lea     rcx, unk_1000048BC
or      al, [rcx]
jnz     short loc_10000305D
lea     rdi, asc_100003F3A; "--"
call    _puts
call    sub_100002512
mov     cs:dword_1000049A0, 0
mov     esi, 3Ah
lea     rdi, [rbp+var_A0]
mov     rdx, [rbp+var_50]
mov     ecx, [rbp+var_34]
call    sub_1000033E5
jmp     short loc_10000308B
test    r14d, r14d
jz      short loc_1000030BF
lea     rax, unk_100004A50
mov     byte ptr [rax], 1
lea     rax, unk_1000048BC
jmp     short loc_1000030C6
mov     esi, 2Dh
lea     rdi, [rbp+var_A0]
mov     rdx, [rbp+var_50]
mov     ecx, [rbp+var_34]
call    sub_1000033E5
lea     rax, unk_100004C64
dec     dword ptr [rax]
lea     rax, unk_100004A50
mov     byte ptr [rax], 0
mov     rdi, [rbp+var_50]; void *
call    _free
test    r14d, r14d
jnz     short loc_1000030F8
lea     rax, qword_1000049D0
mov     rax, [rax]
test    rax, rax
jz      short loc_1000030F8
lea     rdi, [rbp+var_A0]
call    sub_10000244F
inc     cs:dword_1000049A0
add     r14d, [rbp+var_A4]
cmp     byte ptr [r12], 0
jz      loc_100002A2E
mov     rax, [r13+0]
test    rax, rax
jg      loc_100002A2E
jmp     loc_1000031C1
lea     rax, byte_100004A01
mov     byte ptr [rax], 1
lea     rax, byte_100004C61
cmp     byte ptr [rax], 0
jnz     loc_10000333D
lea     rdi, aS; "%s"
xor     r14d, r14d
xor     eax, eax
mov     rsi, rbx
call    _warn
jmp     loc_10000333D
movzx   eax, [rbp+var_13C]
and     eax, 0F000h
cmp     eax, 4000h
jnz     short loc_100003172
lea     rcx, dword_1000049BC
cmp     dword ptr [rcx], 1
jz      loc_10000333D
movzx   eax, ax
cmp     eax, 1000h
jz      short loc_100003195
cmp     eax, 2000h
jz      short loc_100003195
cmp     eax, 6000h
jz      short loc_100003195
cmp     eax, 0C000h
jnz     loc_10000297A
lea     rax, dword_1000049B8
cmp     dword ptr [rax], 1
jz      loc_10000333D
jmp     loc_10000297A
cmp     [rbp+var_80], 0
jnz     short loc_1000031C1
lea     rax, byte_100004A2A
mov     al, [rax]
test    al, al
jnz     loc_100003352
lea     rax, qword_1000049D0
cmp     qword ptr [rax], 0
jz      short loc_1000031D3
call    sub_100002574
mov     rdi, rbx
call    sub_100001303
lea     rax, byte_1000049DB
cmp     byte ptr [rax], 0
jz      short loc_100003226
lea     rax, byte_100004A51
mov     al, [rax]
test    al, al
jnz     short loc_100003226
lea     rax, byte_100004A18
cmp     byte ptr [rax], 0
jnz     short loc_100003215
mov     rsi, [rbp+var_88]
lea     rdi, aS_0; "%s:"
xor     eax, eax
call    _printf
lea     rdi, aU; "%u\n"
xor     eax, eax
mov     esi, r14d
call    _printf
lea     rax, byte_100004A29
cmp     byte ptr [rax], 0
jz      short loc_100003269
test    r14d, r14d
jz      short loc_100003269
lea     rax, byte_100004A51
mov     al, [rax]
test    al, al
jnz     short loc_100003269
lea     rax, byte_100004A3A
xor     ecx, ecx
cmp     byte ptr [rax], 0
mov     edx, 0Ah
cmovnz  edx, ecx
lea     rdi, aSC; "%s%c"
xor     eax, eax
mov     rsi, r15
call    _printf
lea     rax, byte_1000049D9
cmp     byte ptr [rax], 0
jz      short loc_1000032AE
test    r14d, r14d
jnz     short loc_1000032AE
lea     rax, byte_100004A51
mov     al, [rax]
test    al, al
jnz     short loc_1000032AE
lea     rax, byte_100004A3A
xor     ecx, ecx
cmp     byte ptr [rax], 0
mov     edx, 0Ah
cmovnz  edx, ecx
lea     rdi, aSC; "%s%c"
xor     eax, eax
mov     rsi, r15
call    _printf
jmp     short loc_100003308
test    r14d, r14d
jz      short loc_100003308
lea     rax, byte_100004A29
mov     al, [rax]
lea     rcx, byte_1000049DB
or      al, [rcx]
jnz     short loc_100003308
lea     rax, byte_1000049D9
cmp     byte ptr [rax], 0
jnz     short loc_100003308
lea     rax, dword_1000049B0
mov     eax, [rax]
test    eax, eax
jnz     short loc_100003308
cmp     byte ptr [rbx+4], 0
jz      short loc_100003308
lea     rax, byte_100004A51
mov     al, [rax]
test    al, al
jnz     short loc_100003308
lea     rax, off_100004860
mov     rdi, [rax+40h]; char *
xor     eax, eax
mov     rsi, r15
call    _printf
mov     rdi, [rbp+var_88]; void *
call    _free
mov     rdi, rbx; void *
call    _free
jmp     short loc_10000333D
mov     rdi, rbx
call    sub_100001303
mov     rdi, [rbp+var_88]; void *
call    _free
mov     rdi, rbx; void *
call    _free
xor     r14d, r14d
mov     eax, r14d
add     rsp, 118h
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
retn
xor     edi, edi; int
call    _exit
push    rbp
mov     rbp, rsp
call    _malloc
test    rax, rax
jz      short loc_100003369
pop     rbp
retn
lea     rsi, aMalloc; "malloc"
mov     edi, 2; int
xor     eax, eax
call    _err
push    rbp
mov     rbp, rsp
call    _calloc
test    rax, rax
jz      short loc_10000338C
pop     rbp
retn
lea     rsi, aCalloc; "calloc"
mov     edi, 2; int
xor     eax, eax
call    _err
push    rbp
mov     rbp, rsp
call    _realloc
test    rax, rax
jz      short loc_1000033AF
pop     rbp
retn
lea     rsi, aRealloc; "realloc"
mov     edi, 2; int
xor     eax, eax
call    _err
push    rbp
mov     rbp, rsp
call    _strdup
test    rax, rax
jz      short loc_1000033D2
pop     rbp
retn
lea     rsi, aStrdup; "strdup"
mov     edi, 2; int
xor     eax, eax
call    _err
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
push    rax
mov     r13d, ecx
mov     rbx, rdx
mov     r12d, esi
mov     r15, rdi
lea     rax, byte_100004A18
xor     r14d, r14d
cmp     byte ptr [rax], 0
jnz     short loc_100003453
lea     rax, byte_100004A3A
cmp     byte ptr [rax], 0
mov     rsi, [r15+18h]
jz      short loc_100003438
lea     rdi, aS; "%s"
xor     r14d, r14d
xor     eax, eax
call    _printf
xor     edi, edi; int
call    _putchar
jmp     short loc_100003453
mov     rax, cs:___stdoutp_ptr
mov     rax, [rax]
mov     rdi, rsi; char *
mov     rsi, rax; FILE *
call    _fputs
mov     r14d, 1
lea     rax, byte_100004A39
cmp     byte ptr [rax], 0
jz      short loc_100003481
test    r14d, r14d
jz      short loc_10000346C
mov     edi, r12d; int
call    _putchar
mov     esi, [r15+20h]
lea     rdi, aD; "%d"
xor     eax, eax
call    _printf
inc     r14d
lea     rax, byte_1000049DA
cmp     byte ptr [rax], 0
jz      short loc_1000034AD
test    r14d, r14d
jle     short loc_10000349A
mov     edi, r12d; int
call    _putchar
mov     rsi, [r15]
lea     rdi, aLld; "%lld"
xor     eax, eax
call    _printf
jmp     short loc_1000034B2
test    r14d, r14d
jz      short loc_1000034BA
mov     edi, r12d; int
call    _putchar
lea     rdx, byte_100004A3B
cmp     byte ptr [rdx], 0
setnz   al
lea     rcx, qword_1000049E0
cmp     qword ptr [rcx], 0
setnz   cl
test    r13d, r13d
jle     loc_1000035C7
or      cl, al
jz      loc_1000035C7
mov     r14d, r13d
add     rbx, 8
xor     r13d, r13d
mov     r12, rdx
test    al, 1
jnz     short loc_100003519
mov     rdi, [r15+10h]
add     rdi, r13; void *
mov     rsi, [rbx-8]
sub     rsi, r13; size_t
mov     rax, cs:___stdoutp_ptr
mov     rcx, [rax]; FILE *
mov     edx, 1; size_t
call    _fwrite
lea     rax, qword_1000049E0
mov     rdx, [rax]
test    rdx, rdx
mov     r13, cs:___stdoutp_ptr
jz      short loc_100003541
mov     rdi, [r13+0]; FILE *
xor     eax, eax
lea     rsi, aSmK; "\x1B[%sm\x1B[K"
call    _fprintf
mov     rdi, [rbx-8]
mov     rsi, [rbx]
sub     rsi, rdi; size_t
add     rdi, [r15+10h]; void *
mov     rcx, [r13+0]; FILE *
mov     edx, 1; size_t
call    _fwrite
lea     rax, qword_1000049E0
cmp     qword ptr [rax], 0
jz      short loc_100003584
mov     rcx, [r13+0]; FILE *
mov     esi, 6; size_t
mov     edx, 1; size_t
lea     rdi, aMK; "\x1B[m\x1B[K"
call    _fwrite
mov     r13, [rbx]
mov     rdx, r12
cmp     byte ptr [rdx], 0
jz      short loc_1000035A0
mov     edi, 0Ah; int
call    _putchar
mov     rdx, r12
mov     cl, [rdx]
jmp     short loc_1000035A2
xor     ecx, ecx
test    cl, cl
setnz   al
add     rbx, 10h
dec     r14
jnz     loc_1000034F0
test    cl, cl
jz      short loc_1000035E0
add     rsp, 8
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
retn
mov     rsi, [r15+8]
mov     rdi, [r15+10h]
mov     rax, cs:___stdoutp_ptr
mov     rcx, [rax]
mov     edx, 1
jmp     short loc_1000035FF
mov     rsi, [r15+8]
sub     rsi, r13; size_t
jz      short loc_100003604
add     r13, [r15+10h]
mov     rax, cs:___stdoutp_ptr
mov     rcx, [rax]; FILE *
mov     edx, 1; size_t
mov     rdi, r13; void *
call    _fwrite
mov     edi, 0Ah; int
add     rsp, 8
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
jmp     _putchar
